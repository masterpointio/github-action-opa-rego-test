name: 'OPA Test and Coverage Report GitHub Actions'
description: 'Run OPA tests and generate coverage report for PRs. Test your OPA Rego policies!'
author: ''

branding:
  icon: 'check-circle'
  color: 'green'

inputs:
  test_directory_path:
    description: 'Path to the directory containing OPA Rego files to test. Default to root directory.'
    required: false
    default: '.'
  write_pr_comment:
    description: 'Flag to write an user friendly PR comment of the test results. Default of true.'
    required: false
    default: true
  pr_comment_title:
    description: 'Title of the PR comment of the test results.'
    required: false
    default: 'OPA Rego Policy Test Results'
  report_untested_files:
    description: 'Check & report in the PR comments of the Rego files that do not have any corresponding test files. For best conventions, append the postfix `_test` in your test file. E.g. `notification.rego` <> `notification_test.rego`'
    required: false
    default: false
  run_coverage_report:
    description: 'Flag to run OPA coverage tests and write to the PR. The `write_pr_comment` must be enabled for the coverage report to be written. Default of true.'
    required: false
    default: true

runs:
  using: 'composite'
  steps:
    - name: Setup OPA
      uses: open-policy-agent/setup-opa@v2
      with:
        version: 0.67.1

    - name: Run OPA Tests
      id: opa-test
      shell: bash
      run: |
        output=$(opa test -v $(find ${{ inputs.test_directory_path }} -type f -name "*.rego") || true)
        echo "$output"
        echo "test_result<<EOF" >> $GITHUB_OUTPUT
        echo "$output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Run OPA Coverage Tests
      id: opa-coverage
      shell: bash
      run: |
        coverage_output=""
        for file in $(find ${{ inputs.test_directory_path }} -type f -name "*.rego" ! -name "*_test.rego"); do
          test_file="${file%.*}_test.rego"
          if [ -f "$test_file" ]; then
            coverage_output+=$(opa test --coverage "$file" "$test_file" || echo "Coverage test failed for $file")
          fi
        done
        echo "$coverage_output"
        echo "coverage_result<<EOF" >> $GITHUB_OUTPUT
        echo "$coverage_output" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Find Rego files without tests
      if: inputs.report_untested_files == 'true'
      id: find-no-test
      shell: bash
      # Find those without corresponding _test.rego files
      run: |
        no_test_files=$(find ${{ inputs.test_directory_path }} -type f -name "*.rego" ! -name "*_test.rego" | while read file; do
          test_file="${file%.*}_test.rego"
          if [ ! -f "$test_file" ]; then
            echo "$file"
          fi
        done)
        echo "no_test_files<<EOF" >> $GITHUB_OUTPUT
        echo "$no_test_files" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    # Parse and format the test results which will be consumed by the following step to comment on the PR.
    - name: "Parse & Format Results from Tests"
      id: parse-results
      run: node ${{ github.action_path }}/dist/index.js
      shell: bash
      # We need to use `env` to pass the inputs into the script. Since this isn't running `with: node` (find the specifics)
      # we cannot pass it in with 'inputs' in this workflow step with this composite action. THis is a workaround since
      # GitHub Actions doesn't have a clean way of having a composite action use a custom action within the same repository.
      env:
        test_result: ${{ steps.opa-test.outputs.test_result }}
        coverage_result: ${{ steps.opa-coverage.outputs.coverage_result }}
        report_untested_files: ${{ inputs.report_untested_files }}
        no_test_files: ${{ steps.find-no-test.outputs.no_test_files }}
        pr_comment_title: ${{ inputs.pr_comment_title }}
        run_coverage_report: ${{ inputs.run_coverage_report }}

    # Create (or update in-place) a PR comment of the test result output.
    - name: Comment on PR
      uses: thollander/actions-comment-pull-request@v2
      # If `write_pr_comment` enabled, regardless of if test is success or fail, write the results of the failure.
      # Even if input is bool, it has to be treated as string bc of GH's behavior (https://github.com/actions/runner/issues/1483)
      if: inputs.write_pr_comment == 'true' && (success() || failure())
      with:
        message: |
          ${{ steps.parse-results.outputs.parsed_results }}
        comment_tag: opa-test-results
        mode: upsert
